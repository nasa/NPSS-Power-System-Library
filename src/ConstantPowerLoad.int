/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     ConstantPowerLoad.int										                     |
 | Author(s):     George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle       |
 | Date(s):       December 2019                                                |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __CONSTANTPOWERLOAD__
#define __CONSTANTPOWERLOAD__

#include "PSL_math.fnc"

class ConstantPowerLoad extends ElectricElement {
  
  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------  

  // title = "";

  description = "The " + isA() + " represents the performance of a generic constant power load (CPL). " +
  "Both on- and off-design, the CPL draws a constant specified power with losses according to a fixed " +
  "efficiency. Supports DC, 1-phase, and 3-phase.";

  usageNotes = isA() +
  "

- The input design parameters that must be specified by the modeler when creating an instance 
of this " + isA() + " component are mass specific power (SpecificPower) and design efficiency 
(eff). This component will consider draw whatever current is needed to deliver the power it is 
commanded to produce (Pdemand), with losses according to its design efficiency. ONDESIGN, it
calculates its mass (Mass) by dividing its ONDESIGN input power by its specific power.

- This component supports DC and AC (single or multiphase) power (see ElectricPowerType). 
At instantiation, this component's power type is unspecified. NPSS Power System Components 
need to have a power type in order to correctly run power calculations. For this component, 
the power type is typically set by calling the findSourcesAndPropagate() method at the top, 
level assembly. This method is defined in ElectricPort.prt.

- This component transforms power, from electrical power at its input port, to useful output 
(load) power. Because this component represents a transformation of power, it includes a node. 
Being a component including a node, its voltage is an indepedent variable (or 2 variables, 
real and imaginary if its connection to the rest of the power system dictates that it is an AC 
component). It also features a dependent that ensures that the electrical power at the input 
port, is sufficient to produce the output power demanded, plus the losses in this component 
(EP_I.S.r * eff == Pdemand). Lastly, if the component is an AC component, it also features a
dependent that ensures the power factor at the input of this load is equal to a a specified
value.

- Note that, as a component that contains a node and has its voltage known at the beginning
of the solverSequence, it uses its prePass() method to call the electrical port update 
function to pass this voltage information to electrical components that it is connected to. 
Note that in the current implementation of the NPSS Power System Library, these components 
containing nodes do not know what currents are going through their ports at the beginning of 
an iteration. Because of this, they must be connected to power transmission components (cables 
and breakers), and these transmission components must be run before node-bearing 
transformation components like this one, as the transmission components will calculate and 
populate these current values. Note that this design is intended to be analogous to a common 
approach taken in fluid networks within NPSS rocket models.

- This component, like other power system components in the NPSS Power System Library, can 
optionally include thermal models. An optional thermal model is enabled by setting 
switchThermPort to TRUE, and plugging an EThermalMass subelement into the S_eThermMass socket. 
Doing these will add a temperature state (existing within EThermalMass) and a thermal port to 
the model. The thermal port is intended to connect this component to a second component that 
represents the mechanism by which heat is extracted from this component. This second component 
could represent a heat exchanger, cold plate, or just model heat transfer from the first 
component to the surrounding environment. For more information, see EThermalMass.

- Note, there is no sizing logic included in this component, other than the mass calculations 
described above.";

  //--------------------------------
  // ****** SETUP VARIABLES ********
  //--------------------------------
  
  real Pdemand {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Power demanded by the load (you set this).";
  }

  real pfDemand {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Power factor this load should run at (you set this).";
  }

  real P {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Power doing useful work in this load element.";
  }

  real pf {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Power factor at input to this load element.";
  }

  eff {
    value = 0.95; IOstatus = "output"; units = "none";
    description = "Efficiency of load.";
  }

  real frequency {
    value = 0; IOstatus = "input"; units = "deg";
    description = "Input frequency.";
  }

  Loss_r {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Real component of losses in this load.";
  }

  Loss_j {
    value = 0; IOstatus="output"; units = "kW";
    description = "Imaginary component of losses in this load.";
  }

  real Q_heat {
    value = 0; IOstatus = "output"; units = "Btu/sec"; // [BTUs / sec]
    description = "Power dissipation in BTU/s at current time.";
  }

  real Vreal{
    value = 1000.;  IOstatus = "output";  units = "none"; // [volts]
    description = "Real portion of voltage.";
  }

  real Vimag{
    value = -1.;  IOstatus = "output";  units = "none"; // [volts]
    description = "Imaginary portion of voltage.";
  }

  ComplexNumber V;
  ComplexNumber S;
  ComplexNumber I;

  //--------------------------------------
  // ******* OPTION VARIABLE SETUP *******
  //--------------------------------------

  Option switchDes {
    allowedValues = { "DESIGN", "OFFDESIGN" }
    description = "Determines if the element is in design or off-design mode.";
    rewritableValues = FALSE;
    trigger = TRUE;
  }

  Option switchThermPort {
    allowedValues = { "FALSE", "TRUE" }
    description = "Determines if component needs thermal port.";
    rewritableValues = FALSE;  // Enables converter optimization.
    trigger = TRUE;
  }
  
  //------------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
  //------------------------------------------------------------  
  
  /* ELECTRICAL PORTS */

  ElectricInputPort EP_I {
    description = "Electric input port.";
  }

  /* SOCKETS */

  Socket S_eThermMass {
    allowedValues = { "Q_heat", "Mass" };
    description = "Thermal mass socket";
    socketType = "EThermalMass";
  }

  //-----------------------------------------------------
  // ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
  //-----------------------------------------------------

  Independent ind_Vreal { 
    varName = "Vreal"; 
    autoSetup = TRUE;
    indepRef = "10000";
    description = "Varies the real component of the load voltage.";
  }

  Independent ind_Vimag { 
    varName = "Vimag"; 
    autoSetup = TRUE;
    indepRef = "10000";
    description = "Varies the imaginary component of the load voltage.";
  }

  Dependent dep_power {
    // eq_lhs = "EP_I.S.r * eff";
    // eq_rhs = "Pdemand";
    eq_lhs = "(Pdemand/EP_I.S.rRMS )**sign(Pdemand)";
    eq_rhs = "eff";
    autoSetup = TRUE;
  }

  Dependent dep_power_factor{
    eq_rhs = "pf";
    eq_lhs = "pfDemand";
    autoSetup = TRUE;
  }

  //---------------------------------------------
  // ******* VARIABLE CHANGED METHODOLOGY *******
  //---------------------------------------------

  void variableChanged(string name, any oldVal) {
    if ( name == "switchThermPort" ) {
      if ( switchThermPort == "TRUE" ) {
        create("", "ThermalInputPort", "Q_I");
      }
    }
    
    if (name == "switchDes") {
      if (EP_I.ElectricPowerType == "DC") {
        ind_Vimag.autoSetup = FALSE;
        dep_power_factor.autoSetup = FALSE;
      } else {
        ind_Vimag.autoSetup = TRUE;
        dep_power_factor.autoSetup = TRUE;
      }
    }
  }

  //-------------------------------------------------
  // ******* PERFORM ENGINEERING CALCULATIONS *******
  //-------------------------------------------------
  
  void calculate() {
    pf = cos(EP_I.S.phase);
    P = EP_I.S.r * eff**sign(EP_I.S.r);
    Loss_r = EP_I.S.r - P;
    Loss_j = EP_I.S.j;

    if (switchThermPort == "TRUE") {
      real KW_PER_BTU_PER_SEC = 1.05505585;
      Q_heat = sqrt(Loss_r**2 + Loss_j**2);
      Q_heat /= KW_PER_BTU_PER_SEC;

      // run the thermal mass model.
      if (!S_eThermMass.isEmpty()) {
        S_eThermMass.execute();
      }
    }
  }

  void prePass() {
    EP_I.frequency = frequency;
    EP_I.setIVRMS(EP_I.I.r, EP_I.I.j, Vreal, Vimag);
  }
}
#endif
